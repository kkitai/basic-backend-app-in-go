// Code generated by MockGen. DO NOT EDIT.
// Source: db/telephone.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kkitai/basic-backend-app-in-go/model"
)

// MockTelephoneAccesscer is a mock of TelephoneAccesscer interface.
type MockTelephoneAccesscer struct {
	ctrl     *gomock.Controller
	recorder *MockTelephoneAccesscerMockRecorder
}

// MockTelephoneAccesscerMockRecorder is the mock recorder for MockTelephoneAccesscer.
type MockTelephoneAccesscerMockRecorder struct {
	mock *MockTelephoneAccesscer
}

// NewMockTelephoneAccesscer creates a new mock instance.
func NewMockTelephoneAccesscer(ctrl *gomock.Controller) *MockTelephoneAccesscer {
	mock := &MockTelephoneAccesscer{ctrl: ctrl}
	mock.recorder = &MockTelephoneAccesscerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelephoneAccesscer) EXPECT() *MockTelephoneAccesscerMockRecorder {
	return m.recorder
}

// GetTelephoneByNumber mocks base method.
func (m *MockTelephoneAccesscer) GetTelephoneByNumber(arg0 string) (*model.Telephone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelephoneByNumber", arg0)
	ret0, _ := ret[0].(*model.Telephone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTelephoneByNumber indicates an expected call of GetTelephoneByNumber.
func (mr *MockTelephoneAccesscerMockRecorder) GetTelephoneByNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelephoneByNumber", reflect.TypeOf((*MockTelephoneAccesscer)(nil).GetTelephoneByNumber), arg0)
}

// ListTelephone mocks base method.
func (m *MockTelephoneAccesscer) ListTelephone() ([]*model.Telephone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTelephone")
	ret0, _ := ret[0].([]*model.Telephone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTelephone indicates an expected call of ListTelephone.
func (mr *MockTelephoneAccesscerMockRecorder) ListTelephone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTelephone", reflect.TypeOf((*MockTelephoneAccesscer)(nil).ListTelephone))
}

// PostTelephone mocks base method.
func (m *MockTelephoneAccesscer) PostTelephone(arg0, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostTelephone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostTelephone indicates an expected call of PostTelephone.
func (mr *MockTelephoneAccesscerMockRecorder) PostTelephone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTelephone", reflect.TypeOf((*MockTelephoneAccesscer)(nil).PostTelephone), arg0, arg1, arg2)
}

// PutTelephoneByNumber mocks base method.
func (m *MockTelephoneAccesscer) PutTelephoneByNumber(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTelephoneByNumber", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTelephoneByNumber indicates an expected call of PutTelephoneByNumber.
func (mr *MockTelephoneAccesscerMockRecorder) PutTelephoneByNumber(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTelephoneByNumber", reflect.TypeOf((*MockTelephoneAccesscer)(nil).PutTelephoneByNumber), arg0, arg1, arg2)
}
